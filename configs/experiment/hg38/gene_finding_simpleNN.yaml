# @package _global_
defaults:
  - /pipeline: gene_finding
  - override /scheduler: cosine_warmup_timm
dataset:
  _name_: gene_finding
  bed_file: /home/s-nojung/jupyterhub/Masterarbeit/Code/hyena-dna/data/gene_finding/gene_finding.bed
  fasta_file: /home/s-nojung/jupyterhub/Masterarbeit/Code/hyena-dna/data/gene_finding/GRCh38.primary_assembly.genome.fa
  label_file: /home/s-nojung/jupyterhub/Masterarbeit/Code/hyena-dna/data/gene_finding/gene_finding.hdf5
  max_length: 1024
  d_output: 9
  add_eos: False
  batch_size: 32
  train_size: 70000

model:
  _name_: dna_embedding
  d_model: 9 # 128
  n_layer: 0    # no hyena layers
  d_inner: ${eval:4 * ${.d_model}}
  vocab_size: 12
  resid_dropout: 0.0
  embed_dropout: 0.0
  fused_mlp: False # figure out how to use fused MLP, maybe only with bf16 + a100
  fused_dropout_add_ln: False # damit keine ERROR? weil nicht installiert...
  residual_in_fp32: True
  pad_vocab_size_multiple: 8
  layer:
    _name_: hyena
    emb_dim: 5
    filter_order: 64
    short_filter_order: 3
    #order: 3 #nr. of convolutions per layer (n-1 conv)
    l_max: 1026  # required to be set the same as the pretrained model if using, don't forget the +2!  ${eval:${dataset.max_length}+2}
    modulate: True
    w: 10
    lr: ${optimizer.lr}
    wd: 0.0
    lr_pos_emb: 0.0

task:
  # 2 options for soft_cross_entropy (for mixup)
  loss:
    # soft_cross_entropy for pytorch 1.10+, which takes in label_smoothing here
    _name_: custom_cce_f1 #cross_entropy
    # label_smoothing: 0.1
  # pass in list of k's
  # last_k_ppl: null
  metrics:
    - accuracy
    - mcc

trainer:
  accelerator: gpu
  devices: 1
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 150
  precision: 16  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.train_size}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.train_size}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 9e-3
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 22
  global_batch_size: ${dataset.batch_size}
  remove_test_loader_in_eval: False  # True: no test set in this benchmark
  pretrained_model_strict_load: False  # false allows encoder/decoder to be used if new model uses it
  # for loading backbone and not head, requires both of these flags below
  pretrained_model_path: null #/home/s-nojung/jupyterhub/Masterarbeit/Code/hyena-dna/pretrained_weights/hyenadna-tiny-1k-seqlen/weights.ckpt
  pretrained_model_state_hook:
    _name_: load_backbone
    freeze_backbone: False  # seems to work much better if false (ie finetune entire model)

